{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf460
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww11000\viewh17520\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs48 \cf0 Javascript Basics\

\fs24 \
\

\b console.log()
\b0 \
- This is used as a way to return progress / check work. It\'92s a great tool for printing debugging information; much like the \'93print\'94 tool in python.\
- If a browser opens up a script with this in it, it will print in the browser council.\
\

\b var \{\{VariableName\}\} = \{\{SomeValue\}\}
\b0  \'97 Declare new variables.\
ex. 
\b var FirstName = \'93Daniel\'94
\b0 \
\
JS String Principles\'85 http://mzl.la/ORU8rA\
Primitive string values vs. String Object \
Note that JavaScript distinguishes between String objects and primitive string values. \
(The same is true of Boolean and Numbers.)\
\
 \

\b \

\b0\fs48 Objects\

\b\fs24 \
var myobj = \{_\};\

\i var bio = \{\'93name\'94 : \'93Daniel\'94\}
\i0 \
\
object.property = \'93value\'94\
bio.email = \'93dan.alpers@gmail.com\'94
\b0 \

\i dot notation - 
\i0 Adding properties to an object, not declaring new objects.\
\

\b object[\'93property\'94] = \'93value\'94\

\b0 Same shit as above, except we use a string of the property. \'97 Here\'92s a breakdown of the difference\'85 {\field{\*\fldinst{HYPERLINK "http://www.dev-archive.net/articles/js-dot-notation/"}}{\fldrslt http://www.dev-archive.net/articles/js-dot-notation/}}\
\

\b $(\'93#main\'94).append(bio.name);\

\b0 Use dot notation to access properties, in this case, appending it to the page.\
\
\
\

\fs48 JSON\

\fs24 \
{\field{\*\fldinst{HYPERLINK "http://www.copterlabs.com/json-what-it-is-how-it-works-how-to-use-it/"}}{\fldrslt http://www.copterlabs.com/json-what-it-is-how-it-works-how-to-use-it/}}\
\
JSON linter (looks for bugs) \'97 {\field{\*\fldinst{HYPERLINK "http://jsonlint.com/"}}{\fldrslt http://jsonlint.com/}}\
\
\
\

\fs48 Functions
\fs24 \

\b \
replace \'97 [string].\ul replace\ulnone ([\'93old\'94], [\'93new\'94])
\b0  \'97 This changes a value within an established variable\
\

\b slice \'97 newArray = oldArray.\ul slice\ulnone (0);
\b0 \
This works much like the \'93cut\'94 function on any comp. Just like string.slice(begin, [end]) separates the characters of a string, array.slice(begin, [end]) separates the elements of an array from the index of the beginning up to the end; but the later is optional.\
\

\b pop \'97 lastN = newArray\ul .pop\ulnone ()\

\b0 Works the same it did in python; takes the last value of the string, array, or object, and places it in a variable if it is assigned.\
\

\b push \'97 newArray.push(lastN + 1)
\b0 \
Works just like the \'93append\'94 function in python or Jquery. This pushes a value to the end of a string, object, or array.\
\

\b split \'97 var names = oldName.split(" ")\

\b0 This will divide one string into an array of strings.\
\

\b join \'97 finalName = names.join(\'93
\b0 charset
\b \'94)\

\b0 This will join strings into an array, and each array element will be separated by the optional character set (charset)
\b \

\b0 \
\
\

\fs48 Statements & Loops\

\fs24 \

\b if (condition) \{\
	do something();\
\} else \{\
	do something else();\
\}
\b0 \
\
\
\ul While loops
\b \ulnone \
var courses = 0;\
while (cameron.job === \'93course dev\'94) \{\
	makeCourse();\
	courses = courses + 1;\
\}
\b0 \
\
\ul For loops\ulnone \

\b for (initialization; condition; mutator) \{\
	doSomething();\
\}
\b0 \
ex.\
for(var i=0, i<9; i++) \{\
	console.log(i);\
\}\
\
\ul For in loops\

\b \ulnone for (item in object) \{\
	doSomething();\
\}
\b0 \
\

\fs36 JQuery\

\fs24 \
 
\b\fs28 $(\'93 \'93)  
\b0\fs24 \'97 This signifies JQuery in the console tool in DevTools.\
\
}